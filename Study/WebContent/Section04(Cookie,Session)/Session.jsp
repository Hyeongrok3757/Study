<%@ page language="java" contentType="text/html; charset=EUC-KR"
    pageEncoding="EUC-KR"%>
<%
	// Session : 여러 웹 컴포넌트들이 협력 작업을 시작해서 끝내기까지의 기간을 의미
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 1. 서블릿 클래스에서 사용하는 방법 
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	HttpSession servletSession = request.getSession();  // 세션 시작 ( 사용중인 세션이 존재할 경우 쓰던걸 가져옴 )
	
	servletSession.setAttribute("ID", "hyeongrok"); // 데이터 저장  ( 동일 데이터이름이 존재하면 기존 값을 지우고 새로 저장한다.(수정기능))
						   // (데이터이름 , 데이터 값) -> 데이터이름: 문자열 , 데이터 값: 아무 객체나 가능
	
	String id = (String) servletSession.getAttribute("ID"); // 세션 데이터 영역의 데이터를 가져온다.(데이터이름을 입력), 리턴타입이 Object이므로 데이터에 맞게 캐스팅해야함.
	
	servletSession.removeAttribute("ID"); // 세션 데이터 영역의 데이터를 삭제한다.(데이터이름을 입력)
	
	servletSession.invalidate(); // 세션을 끝낸다. (세션을 없애고 세션에 속해있는 값들을 모두 없앰)
	
	// 쿠키 : 같은 웹 서버내에 있는 모든 웹 컴포넌트들과 자바가 아닌 웹 애플리케이션 프로그램들까지도 공유가 가능
	
	// 세션 : 같은 웹 애플리케이션 디렉토리에 있는 웹 컴포넌트들끼리만 공유가 가능
	
	// 한 웹 애플리케이션 디렉토리에서 세션이 진행되어도 다른 웹 애플리케이션 디렉토리에서 다른 세션을 사용할수 있다.
	
	// 세션아이디는 쿠키의 형태로 전송된다.(해당쿠키이름 : JSESSIONID)( 아이디뒤에 해당 애플리케이셔 디렉토리 경로를 붙여서 여러 세션을 관리할수 있음)
	
	// 세션을 종료하지 않으면 브라우저가 종료되도 일정기간 메모리 자원을 유지함
	
	// 세션은 일정기간 사용하지 않으면 자동으로 끝난다.
	int sec = servletSession.getMaxInactiveInterval(); // 세션 최대 비활성 기간 체크
	servletSession.setMaxInactiveInterval(3600); // 세션 최대 비활성 기간 설정(초단위), -값 입력시 무한대 유지
	
	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 2. JSP 페이지에서 사용하는 방법 
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// JSP페이지가 서블릿 클래스로 변환될때 자동으로 .getsession()이 호출되다. > session 내장변수를 사용하면 됨.
	
	// JSP페이지에 session이 존재함
	
	session.setAttribute("ID", "hyeongrok"); // 데이터 저장
	String ID = (String) session.getAttribute("ID"); // 데이터 가져오기
	session.removeAttribute("ID"); // 데이터 삭제
	session.invalidate(); // 세션 종료
	
	// <%@page session="false" %.>  page지시자를 써서 해당 페이지에서 session을 사용하지 않게하기 
	
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 3. 쿠키를 사용할 수 없는 환경에서 사용법 ( 보안이나 정책상 쿠키를 차단한 경우 )
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// URL뒤에 세션 아이디를 붙여서 전송하는 방법을 사용한다
	// A페이지 전달(B페이지에 대한 주소+세션아이디를 포함한 태그) -> 브라우저 에서 B페이지 링크 이용 -> B페이지에서 세션아이디를 사용
	// http://localhost:8080/wp/board/B.jsp;JSESSIONID=세션아이디코드
	
	// response.endcodeURL(주소)을 사용하면 뒤쪽에 자동으로 세션아이디가 붙는다.
	// response.endcodeURL(주소)을 사용시 만약 주소가 현재 웹 애플리케이션에 속하지 않으면 세션아이디를 추가하지 않고 리턴
	// response.endcodeURL(주소)을 사용시 브라우저로 부터 수신된 쿠키가 하나라도 존재할 경우 쿠키사용이 가능하다고 판단하여 세션아이디를 추가하지 않고 리턴
	
	String url1 = response.encodeURL("http:/localhost:8080/wp/board/B.jsp"); // 전체경로사용
	String url2 = response.encodeURL("B.jsp"); // 상대경로사용(현재 페이지로 부터의 경로)
	String url3 = response.encodeURL("/board/B.jsp"); // 웹서버내의 경로
	
	// 쿠키사용 불가상황에 sendRedirect()를 통한 호출 후에도 세션을 계속 사용할 경우 : encodeRedirectURL() 사용
	String url4 = response.encodeRedirectURL("/board/b.jsp");
	
	
	// 받는측에서는 getsession()메서드가 알아서 URL에서 세션아이디를 추출함
	
%>